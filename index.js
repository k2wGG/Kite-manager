import fetch from 'node-fetch';
import chalk from 'chalk';
import readline from 'readline';
import fs from 'fs/promises';
import { SocksProxyAgent } from 'socks-proxy-agent';
import { HttpsProxyAgent } from 'https-proxy-agent';

/**
 * –§–∞–π–ª, –≥–¥–µ –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –∏ –≤–æ–ø—Ä–æ—Å–∞–º.
 */
const ENDPOINTS_FILE = 'endpoints.json';

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ (–ø—Ä–∏–º–µ—Ä).
 */
function showLogo() {
  console.log(chalk.yellow(`
  _   _           _  _____      
 | \\ | |         | ||____ |     
 |  \\| | ___   __| |    / /_ __ 
 | . \` |/ _ \\ / _\` |    \\ \\ '__|
 | |\\  | (_) | (_| |.___/ / |   
 \\_| \\_/\\___/ \\__,_|\\____/|_|   
                                
 Hyperlane Node Manager ‚Äî —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∏ @Nod3r
`));
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Å—Ç–æ–π "prompt").
 * @param {string} query - –í–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @returns {Promise<string>}
 */
function askQuestion(query) {
  return new Promise(resolve => {
    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
    rl.question(query, answer => {
      rl.close();
      resolve(answer.trim());
    });
  });
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –≥–¥–µ —Ö—Ä–∞–Ω–∏–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã, —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–∑ endpoints.json.
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
 * {
 *   "https://endpoint-url": {
 *     "agent_id": "...",
 *     "name": "...",
 *     "questions": [...]
 *   },
 *   ...
 * }
 */
let endpointsData = {};

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ endpoints.json.
 * –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π.
 */
async function loadEndpoints() {
  try {
    const data = await fs.readFile(ENDPOINTS_FILE, 'utf8');
    endpointsData = JSON.parse(data);
    console.log(chalk.green(`[OK] –î–∞–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ ${ENDPOINTS_FILE}`));
  } catch (err) {
    console.log(chalk.yellow(`[–ò–ù–§–û] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å ${ENDPOINTS_FILE}. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª.`));
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:
    endpointsData = {
      "https://deployment-uu9y1z4z85rapgwkss1muuiz.stag-vxzy.zettablock.com/main": {
        "agent_id": "deployment_UU9y1Z4Z85RAPGwkss1mUUiZ",
        "name": "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç Kite AI",
        "questions": []
      },
      "https://deployment-ecz5o55dh0dbqagkut47kzyc.stag-vxzy.zettablock.com/main": {
        "agent_id": "deployment_ECz5O55dH0dBQaGKuT47kzYC",
        "name": "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º —Ü–µ–Ω–∞–º",
        "questions": []
      },
      "https://deployment-sofftlsf9z4fya3qchykaanq.stag-vxzy.zettablock.com/main": {
        "agent_id": "deployment_SoFftlsf9z4fyA3QCHYkaANq",
        "name": "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
        "questions": []
      }
    };
    await saveEndpoints(); // –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å—Ä–∞–∑—É
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è endpointsData –≤ endpoints.json.
 */
async function saveEndpoints() {
  try {
    await fs.writeFile(ENDPOINTS_FILE, JSON.stringify(endpointsData, null, 2), 'utf8');
    console.log(chalk.green(`[OK] –î–∞–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${ENDPOINTS_FILE}`));
  } catch (err) {
    console.log(chalk.red(`[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ${ENDPOINTS_FILE}: ${err.message}`));
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ wallets.txt.
 * –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É (–ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —Å–æ–∑–¥–∞—ë—Ç).
 */
async function loadWallets() {
  try {
    const data = await fs.readFile('wallets.txt', 'utf8');
    const wallets = data.split('\n')
      .map(line => line.trim())
      .filter(line => line && !line.startsWith('#'));

    if (wallets.length === 0) {
      throw new Error('–í —Ñ–∞–π–ª–µ wallets.txt –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤');
    }
    return wallets;
  } catch (err) {
    console.log(`${chalk.red('[–û–®–ò–ë–ö–ê]')} –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ wallets.txt: ${err.message}`);
    throw err;
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ proxies.txt.
 * –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
 */
async function loadProxies() {
  try {
    const data = await fs.readFile('proxies.txt', 'utf8');
    return data.split('\n')
      .map(line => line.trim())
      .filter(line => line && !line.startsWith('#'))
      .map(proxy => {
        if (proxy.includes('://')) {
          const url = new URL(proxy);
          const protocol = url.protocol.replace(':', '');
          const auth = url.username ? `${url.username}:${url.password}` : '';
          const host = url.hostname;
          const port = url.port;
          return { protocol, host, port, auth };
        } else {
          const parts = proxy.split(':');
          let [protocol, host, port, user, pass] = parts;
          protocol = protocol.replace('//', '');
          const auth = user && pass ? `${user}:${pass}` : '';
          return { protocol, host, port, auth };
        }
      });
  } catch (err) {
    console.log(`${chalk.yellow('[–ò–ù–§–û]')} –§–∞–π–ª proxies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.`);
    return [];
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ HTTP/SOCKS –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏.
 */
function createAgent(proxy) {
  if (!proxy) return null;

  const { protocol, host, port, auth } = proxy;
  const authString = auth ? `${auth}@` : '';
  const proxyUrl = `${protocol}://${authString}${host}:${port}`;

  return protocol.startsWith('socks')
    ? new SocksProxyAgent(proxyUrl)
    : new HttpsProxyAgent(proxyUrl);
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∫–æ—à–µ–ª—å–∫–∞.
 */
class WalletStatistics {
  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –ø–æ –∏–º–µ–Ω–∞–º –∏–∑ endpointsData
    this.agentInteractions = {};
    for (const endpointUrl in endpointsData) {
      const agentName = endpointsData[endpointUrl].name;
      this.agentInteractions[agentName] = 0;
    }
    this.totalPoints = 0;
    this.totalInteractions = 0;
    this.lastInteractionTime = null;
    this.successfulInteractions = 0;
    this.failedInteractions = 0;
  }
}

/**
 * –ö–ª–∞—Å—Å —Å–µ—Å—Å–∏–∏ –∫–æ—à–µ–ª—å–∫–∞.
 */
class WalletSession {
  constructor(walletAddress, sessionId) {
    this.walletAddress = walletAddress;
    this.sessionId = sessionId;
    this.dailyPoints = 0;
    this.startTime = new Date();
    this.nextResetTime = new Date(this.startTime.getTime() + 24 * 60 * 60 * 1000);
    this.statistics = new WalletStatistics();
  }

  updateStatistics(agentName, success = true) {
    if (typeof this.statistics.agentInteractions[agentName] === 'undefined') {
      // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –±—ã–ª–æ —Ç–∞–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ –º–æ–º–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      this.statistics.agentInteractions[agentName] = 0;
    }
    this.statistics.agentInteractions[agentName]++;
    this.statistics.totalInteractions++;
    this.statistics.lastInteractionTime = new Date();
    if (success) {
      this.statistics.successfulInteractions++;
      this.statistics.totalPoints += 10; // –û—á–∫–∏ –∑–∞ —É—Å–ø–µ—à–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    } else {
      this.statistics.failedInteractions++;
    }
  }

  printStatistics() {
    console.log(`\n${chalk.blue(`[–°–µ—Å—Å–∏—è ${this.sessionId}]`)} ${chalk.green(`[${this.walletAddress}]`)} ${chalk.cyan('üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')}`);
    console.log(`${chalk.yellow('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê')}`);
    console.log(`${chalk.cyan('üí∞ –í—Å–µ–≥–æ –æ—á–∫–æ–≤:')} ${chalk.green(this.statistics.totalPoints)}`);
    console.log(`${chalk.cyan('üîÑ –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:')} ${chalk.green(this.statistics.totalInteractions)}`);
    console.log(`${chalk.cyan('‚úÖ –£—Å–ø–µ—à–Ω–æ:')} ${chalk.green(this.statistics.successfulInteractions)}`);
    console.log(`${chalk.cyan('‚ùå –ù–µ—É–¥–∞—á–Ω–æ:')} ${chalk.red(this.statistics.failedInteractions)}`);
        console.log(`${chalk.cyan('‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:')} ${chalk.yellow(this.statistics.lastInteractionTime ? this.statistics.lastInteractionTime.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow', hour12: false }) : '–ù–∏–∫–æ–≥–¥–∞')}`);
    console.log(`\n${chalk.cyan('ü§ñ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–≥–µ–Ω—Ç–∞–º–∏:')}`);
    for (const [agentName, count] of Object.entries(this.statistics.agentInteractions)) {
      console.log(`   ${chalk.yellow(agentName)}: ${chalk.green(count)}`);
    }
    console.log(chalk.yellow('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'));
  }
}

/**
 * –ö–ª–∞—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
 */
class KiteAIAutomation {
  constructor(walletAddress, proxyList = [], sessionId) {
    this.session = new WalletSession(walletAddress, sessionId);
    this.proxyList = proxyList;
    this.currentProxyIndex = 0;
    this.MAX_DAILY_POINTS = 200;
    this.POINTS_PER_INTERACTION = 10;
    this.MAX_DAILY_INTERACTIONS = this.MAX_DAILY_POINTS / this.POINTS_PER_INTERACTION;
    this.isRunning = true;
  }

  getCurrentProxy() {
    if (this.proxyList.length === 0) return null;
    return this.proxyList[this.currentProxyIndex];
  }

  rotateProxy() {
    if (this.proxyList.length === 0) return null;
    this.currentProxyIndex = (this.currentProxyIndex + 1) % this.proxyList.length;
    const proxy = this.getCurrentProxy();
    this.logMessage('üîÑ', `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∫—Å–∏: ${proxy.protocol}://${proxy.host}:${proxy.port}`, 'cyan');
    return proxy;
  }

  logMessage(emoji, message, color = 'white') {
    const timestamp = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow', hour12: false });
    const sessionPrefix = chalk.blue(`[–°–µ—Å—Å–∏—è ${this.session.sessionId}]`);
    const walletPrefix = chalk.green(`[${this.session.walletAddress.slice(0, 6)}...]`);
    console.log(`${chalk.yellow(`[${timestamp}]`)} ${sessionPrefix} ${walletPrefix} ${chalk[color](`${emoji} ${message}`)}`);
  }

  resetDailyPoints() {
    const currentTime = new Date();
    if (currentTime >= this.session.nextResetTime) {
      this.logMessage('‚ú®', '–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ 24-—á–∞—Å–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤', 'green');
      this.session.dailyPoints = 0;
      this.session.nextResetTime = new Date(currentTime.getTime() + 24 * 60 * 60 * 1000);
      return true;
    }
    return false;
  }

  async shouldWaitForNextReset() {
    if (this.session.dailyPoints >= this.MAX_DAILY_POINTS) {
      const waitSeconds = (this.session.nextResetTime - new Date()) / 1000;
      if (waitSeconds > 0) {
        this.logMessage('üéØ', `–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –¥–µ–Ω—å (${this.MAX_DAILY_POINTS})`, 'yellow');
        this.logMessage('‚è≥', `–°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å: ${this.session.nextResetTime.toISOString().replace('T', ' ').slice(0, 19)}`, 'yellow');
        await new Promise(resolve => setTimeout(resolve, waitSeconds * 1000));
        this.resetDailyPoints();
      }
      return true;
    }
    return false;
  }

  async getRecentTransactions() {
    this.logMessage('üîç', '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...', 'white');
    const url = 'https://testnet.kitescan.ai/api/v2/advanced-filters';
    const params = new URLSearchParams({
      transaction_types: 'coin_transfer',
      age: '5m'
    });

    try {
      const agent = createAgent(this.getCurrentProxy());
      const response = await fetch(`${url}?${params}`, {
        agent,
        headers: {
          'accept': '*/*',
          'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      const data = await response.json();
      const hashes = data.items?.map(item => item.hash) || [];
      this.logMessage('üìä', `–ù–∞–π–¥–µ–Ω–æ ${hashes.length} –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`, 'magenta');
      return hashes;
    } catch (e) {
      this.logMessage('‚ùå', `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${e}`, 'red');
      this.rotateProxy();
      return [];
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI.
   * endpoint ‚Äî —ç—Ç–æ –∫–ª—é—á (URL) –∏–∑ endpointsData
   */
  async sendAiQuery(endpoint, message) {
    const agent = createAgent(this.getCurrentProxy());
    const headers = {
      'Accept': 'text/event-stream',
      'Content-Type': 'application/json',
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    };
    const data = {
      message,
      stream: true
    };

    try {
      const response = await fetch(endpoint, {
        method: 'POST',
        agent,
        headers,
        body: JSON.stringify(data)
      });

      const sessionPrefix = chalk.blue(`[–°–µ—Å—Å–∏—è ${this.session.sessionId}]`);
      const walletPrefix = chalk.green(`[${this.session.walletAddress.slice(0, 6)}...]`);
      process.stdout.write(`${sessionPrefix} ${walletPrefix} ${chalk.cyan('ü§ñ –û—Ç–≤–µ—Ç –ò–ò: ')}`);

      let accumulatedResponse = "";

      for await (const chunk of response.body) {
        const lines = chunk.toString().split('\n');
        for (const line of lines) {
          if (line.startsWith('data: ')) {
            try {
              const jsonStr = line.slice(6);
              if (jsonStr === '[DONE]') break;
              const jsonData = JSON.parse(jsonStr);
              const content = jsonData.choices?.[0]?.delta?.content || '';
              if (content) {
                accumulatedResponse += content;
                process.stdout.write(chalk.magenta(content));
              }
            } catch (e) {
              continue;
            }
          }
        }
      }
      console.log();
      return accumulatedResponse.trim();
    } catch (e) {
      this.logMessage('‚ùå', `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ò–ò: ${e}`, 'red');
      this.rotateProxy();
      return "";
    }
  }

  async reportUsage(endpoint, message, response) {
    this.logMessage('üìù', '–ó–∞–ø–∏—Å—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è...', 'white');

    // –î–æ—Å—Ç–∞–µ–º agent_id –∏–∑ endpointsData
    const agent_id = endpointsData[endpoint].agent_id;

    const url = 'https://quests-usage-dev.prod.zettablock.com/api/report_usage';
    const data = {
      wallet_address: this.session.walletAddress,
      agent_id,
      request_text: message,
      response_text: response,
      request_metadata: {}
    };

    try {
      const agent = createAgent(this.getCurrentProxy());
      const result = await fetch(url, {
        method: 'POST',
        agent,
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
        body: JSON.stringify(data)
      });
      return result.status === 200;
    } catch (e) {
      this.logMessage('‚ùå', `–û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏: ${e}`, 'red');
      this.rotateProxy();
      return false;
    }
  }

  async run() {
    this.logMessage('üöÄ', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è Kite AI', 'green');
    this.logMessage('üíº', `–ö–æ—à–µ–ª–µ–∫: ${this.session.walletAddress}`, 'cyan');
    this.logMessage('üéØ', `–î–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å: ${this.MAX_DAILY_POINTS} –æ—á–∫–æ–≤ (${this.MAX_DAILY_INTERACTIONS} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π)`, 'cyan');
    this.logMessage('‚è∞', `–°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å: ${this.session.nextResetTime.toISOString().replace('T', ' ').slice(0, 19)}`, 'cyan');

    if (this.proxyList.length > 0) {
      this.logMessage('üåê', `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.proxyList.length} –ø—Ä–æ–∫—Å–∏`, 'cyan');
    } else {
      this.logMessage('üåê', '–†–∞–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'yellow');
    }

    let interactionCount = 0;
    try {
      while (this.isRunning) {
        this.resetDailyPoints();
        await this.shouldWaitForNextReset();

        interactionCount++;
        console.log(`\n${chalk.blue(`[–°–µ—Å—Å–∏—è ${this.session.sessionId}]`)} ${chalk.green(`[${this.session.walletAddress}]`)} ${chalk.cyan('‚ïê'.repeat(60))}`);
        this.logMessage('üîÑ', `–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ ‚Ññ${interactionCount}`, 'magenta');
        this.logMessage('üìà', `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${this.session.dailyPoints + this.POINTS_PER_INTERACTION}/${this.MAX_DAILY_POINTS} –æ—á–∫–æ–≤`, 'cyan');
        this.logMessage('‚è≥', `–°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å: ${this.session.nextResetTime.toISOString().replace('T', ' ').slice(0, 19)}`, 'cyan');

        const transactions = await this.getRecentTransactions();
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π" –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if (endpointsData["https://deployment-sofftlsf9z4fya3qchykaanq.stag-vxzy.zettablock.com/main"]) {
          endpointsData["https://deployment-sofftlsf9z4fya3qchykaanq.stag-vxzy.zettablock.com/main"].questions =
            transactions.map(tx => `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ: ${tx}`);
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        const allEndpoints = Object.keys(endpointsData);
        const endpoint = allEndpoints[Math.floor(Math.random() * allEndpoints.length)];
        const endpointObj = endpointsData[endpoint];
        const questions = endpointObj.questions;

        if (!questions || questions.length === 0) {
          this.logMessage('‚ö†Ô∏è', `–£ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ "${endpointObj.name}" –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`, 'red');
          continue;
        }

        const question = questions[Math.floor(Math.random() * questions.length)];

        this.logMessage('ü§ñ', `–°–∏—Å—Ç–µ–º–∞ –ò–ò: ${endpointObj.name}`, 'cyan');
        this.logMessage('üîë', `ID –∞–≥–µ–Ω—Ç–∞: ${endpointObj.agent_id}`, 'cyan');
        this.logMessage('‚ùì', `–ó–∞–ø—Ä–æ—Å: ${question}`, 'cyan');

        const response = await this.sendAiQuery(endpoint, question);
        let interactionSuccess = false;

        if (await this.reportUsage(endpoint, question, response)) {
          this.logMessage('‚úÖ', '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ', 'green');
          this.session.dailyPoints += this.POINTS_PER_INTERACTION;
          interactionSuccess = true;
        } else {
          this.logMessage('‚ö†Ô∏è', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ', 'red');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        this.session.updateStatistics(endpointObj.name, interactionSuccess);
        this.session.printStatistics();

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        const delay = Math.random() * 2 + 1;
        this.logMessage('‚è≥', `–û–∂–∏–¥–∞–Ω–∏–µ: ${delay.toFixed(1)} —Å–µ–∫—É–Ω–¥...`, 'yellow');
        await new Promise(resolve => setTimeout(resolve, delay * 1000));
      }
    } catch (e) {
      if (e.name === 'AbortError') {
        this.logMessage('üõë', '–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'yellow');
      } else {
        this.logMessage('‚ùå', `–û—à–∏–±–∫–∞: ${e}`, 'red');
      }
    }
  }

  stop() {
    this.isRunning = false;
  }
}

/**
 * –ú–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞–º–∏ (wallets.txt).
 */
async function manageWallets() {
  console.clear();
  console.log(chalk.green('=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏ ==='));
  let wallets = [];
  try {
    const data = await fs.readFile('wallets.txt', 'utf8');
    wallets = data.split('\n')
      .map(line => line.trim())
      .filter(line => line && !line.startsWith('#'));
    console.log(chalk.cyan('–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤:'));
    wallets.forEach((w, i) => console.log(`${i + 1}. ${w}`));
  } catch (err) {
    console.log(chalk.yellow('–§–∞–π–ª wallets.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.'));
  }

  const action = await askQuestion('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: [1] –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å–ø–∏—Å–æ–∫, [2] –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ—à–µ–ª—å–∫–∏, [0] –í—ã—Ö–æ–¥: ');
  if (action === '0') return;

  let newWallets = [];
  console.log(chalk.cyan('–í–≤–µ–¥–∏—Ç–µ –∫–æ—à–µ–ª—å–∫–∏ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏). –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.'));
  while (true) {
    const wallet = await askQuestion('> ');
    if (!wallet) break;
    newWallets.push(wallet);
  }

  if (action === '1') {
    await fs.writeFile('wallets.txt', newWallets.join('\n') + '\n', 'utf8');
    console.log(chalk.green('–°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.'));
  } else if (action === '2') {
    const updatedList = wallets.concat(newWallets);
    await fs.writeFile('wallets.txt', updatedList.join('\n') + '\n', 'utf8');
    console.log(chalk.green('–ù–æ–≤—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.'));
  }
  await askQuestion('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
}

/**
 * –ú–µ–Ω—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–æ—Ç–æ–≤ (endpointsData).
 */
async function manageQuestions() {
  console.clear();
  console.log(chalk.green('=== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–æ—Ç–æ–≤ ==='));
  const allEndpoints = Object.keys(endpointsData);
  if (allEndpoints.length === 0) {
    console.log(chalk.yellow('–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤ endpointsData. –î–æ–±–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –≤ –∫–æ–¥–µ.'));
    await askQuestion('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
    return;
  }

  // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫
  allEndpoints.forEach((url, index) => {
    console.log(`${index + 1}. ${endpointsData[url].name} (${url})`);
  });

  const choice = await askQuestion('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞): ');
  const idx = parseInt(choice);
  if (isNaN(idx) || idx < 1 || idx > allEndpoints.length) {
    console.log(chalk.yellow('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.'));
    return;
  }

  const selectedUrl = allEndpoints[idx - 1];
  const selectedObj = endpointsData[selectedUrl];
  console.log(chalk.cyan(`–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è "${selectedObj.name}":`));
  if (!selectedObj.questions || selectedObj.questions.length === 0) {
    console.log(chalk.yellow('–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç.'));
  } else {
    selectedObj.questions.forEach((q, i) => console.log(`${i + 1}. ${q}`));
  }

  console.log(chalk.cyan('\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.'));
  let newQuestions = [];
  while (true) {
    const question = await askQuestion('> ');
    if (!question) break;
    newQuestions.push(question);
  }
  selectedObj.questions = newQuestions;
  console.log(chalk.green('–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω.'));

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ endpoints.json
  await saveEndpoints();

  await askQuestion('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.
 */
async function runAutomation() {
  console.clear();
  console.log(chalk.green('=== –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ ==='));
  let wallets, proxyList;
  try {
    wallets = await loadWallets();
  } catch (err) {
    console.log(chalk.red('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—à–µ–ª—å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª wallets.txt.'));
    await askQuestion('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
    return;
  }
  proxyList = await loadProxies();
  console.log(`${chalk.cyan('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ:')} ${chalk.green(wallets.length)} –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ ${chalk.green(proxyList.length)} –ø—Ä–æ–∫—Å–∏\n`);

  // –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
  const instances = wallets.map((wallet, index) =>
    new KiteAIAutomation(wallet, proxyList, index + 1)
  );

  console.log(chalk.cyan('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'));
  console.log(chalk.cyan('ü§ñ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π'));
  console.log(chalk.cyan('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'));
  console.log(chalk.yellow('–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C.'));

  try {
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    await Promise.all(instances.map(instance => instance.run()));
  } catch (error) {
    console.log(`\n${chalk.red('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:')} ${error.message}`);
  }
}

/**
 * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 */
async function mainMenu() {
  // –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–≥—Ä—É–∂–∞–µ–º endpoints.json (–µ—Å–ª–∏ –µ—Å—Ç—å)
  await loadEndpoints();

  while (true) {
    console.clear();
    showLogo();
    console.log(chalk.green('=== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ==='));
    console.log('1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏ (wallets.txt)');
    console.log('2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–æ—Ç–æ–≤ (endpoints.json)');
    console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é');
    console.log('0. –í—ã—Ö–æ–¥');
    const choice = await askQuestion('–í–∞—à –≤—ã–±–æ—Ä: ');
    if (choice === '1') {
      await manageWallets();
    } else if (choice === '2') {
      await manageQuestions();
    } else if (choice === '3') {
      await runAutomation();
      await askQuestion('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
    } else if (choice === '0') {
      console.log(chalk.blue('–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.'));
      process.exit(0);
    } else {
      console.log(chalk.yellow('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.'));
      await askQuestion('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)
process.on('SIGINT', () => {
  console.log(`\n${chalk.yellow('üõë –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞...')}`);
  process.exit(0);
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  console.error(`\n${chalk.red('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:')} ${error.message}`);
});

/**
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞.
 */
mainMenu().catch(error => {
  console.error(`\n${chalk.red('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:')} ${error.message}`);
  process.exit(1);
});
